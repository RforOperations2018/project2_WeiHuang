summary(playG$name)
playG$name
playG$neighborhood
waterF.load <- readOGR("https://data.wprdc.org/dataset/fe7cfb11-9f33-4590-a5ee-04419f3f974a/resource/f7c252a5-28be-43ab-95b5-f3eb0f1eef67/download/wf_img.geojson")
waterF_load <- read.csv("water_feature.csv", header = TRUE)
View(waterF_load)
waterF <- waterF_load %>%
mutate(control_type = as.character(control_type),
feater_type = as.character(feature_type))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Class_2-Shiny-Concepts/Sidebar/app_final.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(playG)
View(playG)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
interM_load <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
interM_load <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
View(interM_load)
runApp()
runApp()
runApp()
interM <- read.csv("intersect.csv", header = TRUE)
runApp()
runApp()
playG.load <- readOGR("https://data.wprdc.org/dataset/37e7a776-c98b-4e08-ad61-a8c8e23ec9ab/resource/12d59d62-e86d-4f37-af19-463050496ed6/download/playgrounds_img.geojson")
waterF.load <- readOGR("https://data.wprdc.org/dataset/fe7cfb11-9f33-4590-a5ee-04419f3f974a/resource/f7c252a5-28be-43ab-95b5-f3eb0f1eef67/download/wf_img.geojson")
interM.load <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
runApp()
summary(interM)
interM$police_zone
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
interM_policeZ
interM_policeZ <- sort(ckanUniques("f86f1950-3b73-46f9-8bd4-2991ea99d7c4", "police_zone")$police_zone)
interM_policeZ
runApp()
runApp()
runApp()
runApp()
runApp()
View(interM)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22
###
ParkName_filter <- ifelse(length(input$ParkNameSelect)>0,
paste0("%20AND%20%22name%22%20IN%20(%27", paste(input$ParkNameSelect,collapse = "%27,%27"),"%27)"),"")
#https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22
###
ParkName_filter <- ifelse(length(input$ParkNameSelect)>0,
paste0("%20AND%20%22name%22%20IN%20(%27", paste0(gsub("", "%20",input$ParkNameSelect,collapse = "%27,%27"),"%27)")),"")
runApp()
runApp()
runApp()
runApp()
#https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22
###
ParkName_filter <- ifelse(length(input$ParkNameSelect) > 0,
paste0("%20AND%20%22name%22%20IN%20(%27", paste(gsub(" " ,"%20", input$ParkNameSelect), collapse = "%27,%27"), "%27)"), "")
runApp()
runApp()
runApp()
# Ward_filter <- ifelse(length(input$WardAmountSelect)>0,
#                       paste0("%20AND%20%22ward%22%20IN%20(%27", paste(input$WardAmountSelect,collapse = "%27,%27"),"%27)"),"")
url_1 <- paste0("https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22%20WHERE%20%22ward%22%20%3E=%20%27",
input$WardAmountSelect[1], "%27%20AND%20%22ward%22%20%3C=%20%27", input$WardAmountSelect[2], "%27",ParkName_filter)
runApp()
runApp()
runApp()
View(interM)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
playG_maintenance <- sort(ckanUniques("47350364-44a8-4d15-b6e0-5f79ddff9367", "maintenance_responsibility")$maintenance)
playG_maintenance
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Class_10-Leaflet-Shiny/Leaflet-Map')
greenInfInputs()@data, options = list(scrollX = T)
# Data Table
output$table <- DT::renderDataTable({
playG <- PGInput()
interM <- IMInput()
subset(playG, select = c(name, maintenance_responsibility, ward))
})
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Class_7-CSS/Navbar/app_final.R')
runApp('~/Documents/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp()
runApp()
runApp()
runApp()
# Class 4 ggplot2 Examples
require(ggplot2)
require(plotly)
library(knitr)
opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/')
# Data Stuff
require(dplyr)
require(tibble)
require(reshape2)
pdf(NULL)
diamonds <- diamonds
mtcars <- mtcars %>%
rownames_to_column()
iris <- iris
starwars <- starwars
airquality <- airquality %>%
mutate(Date = as.Date(paste0("1973-", Month, "-", Day)))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_text(aes(label = rowname), angle = 45, hjust = 0, vjust = 1, nudge_y = .5)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_text(aes(label = rowname), angle = 45, hjust = 0, vjust = 1, nudge_y = .5)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_text(aes(label = rowname), angle = 45, hjust = 0, vjust = 1, nudge_y = .5)
ggplotly(ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth() +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG")
)
lines <- mtcars %>%
summarise(mpg = mean(mpg), hp = mean(hp))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_hline(data = lines, aes(yintercept = mpg, color = "MPG"), show.legend = T) +
geom_vline(data = lines, aes(xintercept = hp, color = "HP"), show.legend = T) +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG") +
labs(color = "Averages")
lines
lines <- mtcars %>%
summarise(mpg = mean(mpg), hp = mean(hp))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_hline(data = lines, aes(yintercept = mpg, color = "MPG"), show.legend = T) +
geom_vline(data = lines, aes(xintercept = hp, color = "HP"), show.legend = T) +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG") +
labs(color = "Averages")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_text(aes(x = 0, y = mean(mtcars$mpg), label = "MPG Average"), color = "red", vjust = 0, hjust = 0) +
geom_hline(yintercept = mean(mtcars$mpg), color = "red") +
geom_text(aes(x = mean(mtcars$hp), y = 0,  label = "HP Average"), color = "blue", angle = 90, vjust = 0, hjust = 0) +
geom_vline(xintercept = mean(mtcars$hp), color = "blue") +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_hline(yintercept = mean(mtcars$mpg), color = "red") +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG")
# Customt ggplot theme
custom_theme <- theme(
line = element_line(colour = "black", size = 0.5,
linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white", colour = "black",
size = 0.5, linetype = 1),
text = element_text(family = "", face = "plain",
colour = "black", size = 11,
lineheight = 0.9,  hjust = 0.5,
vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.text = element_text(size = rel(0.8), colour = "grey30"),
axis.text.x = element_text(margin = margin(t = 0.8*5.5/2),
vjust = 1),
axis.text.y = element_text(margin = margin(r = 0.8*5.5/2),
hjust = 1),
axis.ticks = element_line(colour = "grey20"),
axis.ticks.length = unit(5.5/2, "pt"),
axis.title.x = element_text(margin = margin(t = 0.8 * 5.5,
b = 0.8 * 5.5/2)),
axis.title.y = element_text(angle = 90,
margin = margin(r = 0.8 * 5.5,
l = 0.8 * 5.5/2)),
legend.background = element_rect(colour = NA),
legend.spacing = unit(0.2, "cm"),
legend.key = element_rect(fill = "grey95", colour = "white"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "grey", size=0.5, linetype="dashed"),
panel.border = element_rect(fill=NA, color="grey", size=0.5, linetype="solid"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = "white"),
panel.spacing = unit(5.5, "pt"), panel.margin.x = NULL,
panel.spacing.y = NULL, panel.ontop = FALSE,
strip.background = element_rect(fill = "grey85", colour = NA),
strip.text = element_text(colour = "grey10", size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = 5.5,
b = 5.5)),
strip.text.y = element_text(angle = -90,
margin = margin(l = 5.5,
r = 5.5)),
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2),
margin = margin(b = 5.5 * 1.2)),
plot.margin = margin(5.5, 5.5, 5.5, 5.5),
complete = TRUE)
# The Rest of our plots will use this theme
theme_set(custom_theme)
ggplot(m.aq, aes(x=Date, y=value, color = variable)) +
geom_point() +
geom_line() +
scale_color_brewer(palette = "Set1") +
xlab("Date") +
ylab("Wind: mph / Temp: degrees F") +
labs(color = "Measurement", caption = "Source: National Weather Service") +
ggtitle("Observed Wind and Temperature", subtitle = "New York City 1973")
lines <- mtcars %>%
summarise(mpg = mean(mpg), hp = mean(hp))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_hline(data = lines, aes(yintercept = mpg, color = "MPG"), show.legend = T) +
geom_vline(data = lines, aes(xintercept = hp, color = "HP"), show.legend = T) +
ggtitle("Car Miles per Gallon by Horse Power") +
xlab("Horse Power") +
ylab("MPG") +
labs(color = "Averages")
?geom_vline()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pal5
runApp()
runApp('~/Documents/GitHub/hw2-WeiHuang')
runApp('~/Documents/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp()
runApp()
runApp()
runApp()
runApp()
interM_load <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
# Define UI for application
ui <- fluidPage(
#Application title
titlePanel("Pittsburgh Playground and Intersection Markings"),
#Design sider bar
sidebarLayout(
sidebarPanel(
selectInput("PlaygroundNameSelect",
"playground name:",
choices =  playG_name,
multiple = TRUE,
selectize = TRUE,
selected = c("Deer Pit Playground","Arsenal Playground","Baxter Playground","Arlington Playground")),
selectInput("MaintenanceResponsSelect",
"Maintenance Responsibility:",
choices = playG_maintenance,
multiple = TRUE,
selectize = TRUE,
selected = c("Parks - Eastern","Parks - Northeast","Parks - Northern","Parks - Southern")),
sliderInput("WardAmountSelect",
"ward amount:",
min = min(as.numeric(playG_ward), na.rm = T),
max = max(as.numeric(playG_ward), na.rm = T),
value = c(min(as.numeric(playG_ward), na.rm = T), max(as.numeric(playG_ward), na.rm = T)),
step = 1),
selectInput("TypeSelect",
"type:",
levels(interM_load$type),
selected = c("Stop Line", "Crosswalk - Two Lined"),
selectize = T,
multiple = T),
actionButton("reset", "Reset Filters", icon = icon("refresh"))
),
# Tabset Main Panel
mainPanel(
tabsetPanel(
tabPanel("Plot",
plotlyOutput("boxplot"),
plotlyOutput("pointsplot"),
leafletOutput("map")
),
tabPanel("Table",
DT::dataTableOutput("table"))
)
)
)
)
# Define server logic
server <- function(input, output, session = session) {
# Filtered cost and revenue data
PGInput <- reactive({
#Build API Query with proper encodes
#Load and clean data
#https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22
###
PlaygroundName_filter <- ifelse(length(input$PlaygroundNameSelect) > 0,
paste0("%20AND%20%22name%22%20IN%20(%27", paste0(gsub(" " ,"%20", input$PlaygroundNameSelect), collapse = "%27,%27"), "%27)"), "")
Maintenance_filter <- ifelse(length(input$MaintenanceResponsSelect) > 0,
paste0("%20AND%20%22maintenance_responsibility%22%20IN%20(%27", paste0(gsub(" " ,"%20", input$MaintenanceResponsSelect), collapse = "%27,%27"), "%27)"), "")
url_1 <- paste0("https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2247350364-44a8-4d15-b6e0-5f79ddff9367%22%20WHERE%20%22ward%22%20%3E=%20%27",
input$WardAmountSelect[1], "%27%20AND%20%22ward%22%20%3C=%20%27", input$WardAmountSelect[2], "%27",PlaygroundName_filter,Maintenance_filter)
playG <- ckanSQL(url_1)
return(playG)
})
IMInput <- reactive({
#url_2<- paste0("https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%22f86f1950-3b73-46f9-8bd4-2991ea99d7c4%22")
interM <- interM_load
# interM <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
if (length(input$TypeSelect > 0)) {
interM <- subset(interM, type %in% input$TypeSelect)
}
return(interM)
})
# Output Map
output$map <- renderLeaflet({
sp1 <- PGInput()
sp2 <- IMInput()
#Call Data and Build Map
leaflet() %>%
#create basemaps, the OpenStreet Map and the BalckAndWhite Map, and then create bottoms for choosing between two maps
addTiles(group = "OpenStreetMap.Mapnik(default)") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group = "BW") %>%
addLayersControl(baseGroups = c("OpenStreetMap.Mapnik(default)", "BW"),
options = layersControlOptions(collapsed = FALSE)) %>%
#Add polygons for Pttsburgh playgrounds
addMarkers(data = sp1,
lng = ~longitude,
lat = ~latitude) %>%
#Add lines for intersction markings in Pittsburgh
addPolylines(data = sp2, color = ~ pal5(type)) %>%
#Add legends for types of intersection markings
addLegend(position = "bottomright" , pal = pal5, values = interM$type, title = "Type") %>%
setView(-80, 40.45, 12)
})
# Three bars are showing the number of the three chosen parks
output$pointsplot <- renderPlotly({
playG <- PGInput()
ggplotly(
ggplot(data = playG, aes(x = name, y = ward), show.legend = T) +
geom_point() +
theme(axis.text.x = element_text(face = "bold", angle = 45, hjust = 0, vjust = 1, color = "#E41A1C"),
axis.text.y = element_text(face = "bold", angle = 45, hjust = 0, vjust = 1, color = "#E41A1C")) +
labs(x = "Playground Names", title = "Pointsplot for Park Name and Ward Numbers") +
guides(color = FALSE))
})
#Using box plots to show the distribution of the three chosen departments
output$boxplot <- renderPlotly({
playG <- PGInput()
ggplotly(
ggplot(data = playG, aes(x = maintenance_responsibility, y = ward), show.legend = T) +
theme(axis.text.x = element_text(face = "bold", angle = 45, hjust = 0, vjust = 1, color = "#E41A1C"),
axis.text.y = element_text(face = "bold", angle = 45, hjust = 0, vjust = 1, color = "#E41A1C")) +
geom_boxplot() +
labs(x = "Maintenance Responbility", y = "Ward Amount", title = "Boxplot for Maintenance Responsibility and Ward") +
guides(color = FALSE))
})
# Data Table
output$table <- DT::renderDataTable({
playG <- PGInput()
subset(playG, select = c(name, maintenance_responsibility, ward))
})
# output$table <- DT::renderDataTable({
#   interM <- IMInput()
#   subset(interM, select = c(type))
# })
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("playground-intersection-",  ".csv", sep="")
},
content = function(file) {
write.csv(PGInput(), file)
}
)
# Reset Filter Data
observeEvent(input$reset, {
updateSelectInput(session, "PlaygroundNameSelect", selected = c("Arlington Playground"))
updateSelectInput(session, "MaintenanceResponsSelect", selected = c("Parks - Eastern","Parks - Northeast","Parks - Northern","Parks - Southern"))
updateSliderInput(session, "WardAmountSelect", value = c(min(ward, na.rm = T), max(ward, na.rm = T)))
updateSelectInput(session, "TypeSelec", selected = "Stop Line")
showNotification("You have successfully reset the filters", type = "message")
})
}
# Run the application
shinyApp(ui = ui, server = server, enableBookmarking = "url")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
interM_load
interM_load <- readOGR("https://data.wprdc.org/dataset/31ce085b-87b9-4ffd-adbb-0a9f5b3cf3df/resource/f86f1950-3b73-46f9-8bd4-2991ea99d7c4/download/markingsimg.geojson")
interM_load
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
